module random_test(KEY, HEX1, HEX0);
	input [0:0] KEY;
	output [6:0] HEX1, HEX0; 
	
	wire [6:0] o;
	
	random_gen r0(
			.clk(KEY),
			.out(o)
			);
	
	hex_decoder h0(
				.hex_digit(o[3:0]),
				.segments(HEX0)
				);
	hex_decoder h1(
				.hex_digit({1'b0, o[6:4]}),
				.segments(HEX1)
				);
	
endmodule	

module random_gen(
	input clk, 
	output reg [6:0] out
    );
	 
	 reg [20:0] rand;
	 initial rand = ~(20'b0);
	 reg [20:0] rand_next;
	 wire feed0;
	 wire feed1;
	 
	 assign feed0 = rand[20] ^ rand[15];
	 assign feed1 = rand[0] ^ rand [8]; 
	 
	 always @ (posedge clk)
	 begin
		rand <= rand_next;
		out = rand[6:0];
	 end
	 
	 always @ (*)
	 begin
		rand_next = {rand[18:0], feed0, feed1};
	 end

endmodule

module hex_decoder(hex_digit, segments);
    input [3:0] hex_digit;
    output reg [6:0] segments;
   
    always @(*)
        case (hex_digit)
            4'h0: segments = 7'b100_0000;
            4'h1: segments = 7'b111_1001;
            4'h2: segments = 7'b010_0100;
            4'h3: segments = 7'b011_0000;
            4'h4: segments = 7'b001_1001;
            4'h5: segments = 7'b001_0010;
            4'h6: segments = 7'b000_0010;
            4'h7: segments = 7'b111_1000;
            4'h8: segments = 7'b000_0000;
            4'h9: segments = 7'b001_1000;
            4'hA: segments = 7'b000_1000;
            4'hB: segments = 7'b000_0011;
            4'hC: segments = 7'b100_0110;
            4'hD: segments = 7'b010_0001;
            4'hE: segments = 7'b000_0110;
            4'hF: segments = 7'b000_1110;   
            default: segments = 7'h7f;
        endcase
endmodule 